I"¨<p>We all love the caret package because it has made training predictive models so much easier. However, if youâ€™re new to caret, thereâ€™re some things you probably donâ€™t know but should know. Hereâ€™s a list.</p>

<ul>
  <li>When using a resampling approach inside <code class="language-plaintext highlighter-rouge">caret::train()</code>, for example, 10 fold cross validation with 5 repeats, the returned object contains the model trained using the best tuning parameters and on the entire training dataset (not just the resampled dataset). In other words, itâ€™ll return the production model that you can just use directly to predict on the validation or holdout set. No need to re-fit yourself.</li>
  <li>Do pre-processing by specifying the <code class="language-plaintext highlighter-rouge">preProcess</code> argument of the <code class="language-plaintext highlighter-rouge">caret::train()</code> function. This will perform the specified pre-processing steps during the resampling process. Hereâ€™s a pop quiz. Why donâ€™t you want to perform pre-processing outside of the resampling process? Hint: thereâ€™re two major reasons. Doing pre-processing this way will also enable the same pre-processing steps to be applied to the validation set when applying the best model resulted from <code class="language-plaintext highlighter-rouge">caret::train()</code> to it.</li>
  <li>For binary classification problems, we often also need to choose the optimal probability threshold for deciding the classes. You should write self-defined functions to incorporate the search of optimal threshold into the resampling process. As a result, the optimal threshold will be amongst the best parameters returned by <code class="language-plaintext highlighter-rouge">caret::train()</code>. Hereâ€™s an <a href="https://topepo.github.io/caret/using-your-own-model-in-train.html#Illustration5">example</a> of the self-defined functions for random forest.</li>
</ul>
:ET
I"D<p>Today I want to show you the power of two little R functions: <code class="language-plaintext highlighter-rouge">paste()</code> and <code class="language-plaintext highlighter-rouge">outer()</code>. Why should you care? Because you may encounter scenarios like the following.</p>

<p>First, roll a dice 10 times. This can be simulated with one line of R code:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">sample</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">6</span><span class="p">,</span><span class="w"> </span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">replace</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">##  [1] 4 6 1 2 1 3 6 1 4 3</code></pre></figure>

<p>Second, how about rolling two dies 10 times? Can you write two lines of R code to accomplish that? Yes, you can if you leverage <code class="language-plaintext highlighter-rouge">paste()</code> and <code class="language-plaintext highlighter-rouge">outer()</code>. The <code class="language-plaintext highlighter-rouge">paste()</code> function allows you to concatenate strings. The <code class="language-plaintext highlighter-rouge">outer()</code> function returns the outer product of two vectors. If you pass in two numeric vectors, it returns by default the outer product that we learned in linear algebra. But you don’t have to pass in numeric vectors, and you can pass in a function as a third parameter. When you do that, <code class="language-plaintext highlighter-rouge">outer()</code> applies your function to the vectors, and returns the results as cell values of the outer product. For example, we can pass the <code class="language-plaintext highlighter-rouge">paste()</code> function together with two vectors of 1 to 6 into <code class="language-plaintext highlighter-rouge">outer()</code>, under the hood, it will convert the numeric vectors to character vectors and concatenate them using <code class="language-plaintext highlighter-rouge">paste()</code>. The output is a 6 by 6 matrix with values like “1 1”, “1 2” in the cells.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">outer</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">6</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">6</span><span class="p">,</span><span class="w"> </span><span class="n">paste</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">##      [,1]  [,2]  [,3]  [,4]  [,5]  [,6] 
## [1,] "1 1" "1 2" "1 3" "1 4" "1 5" "1 6"
## [2,] "2 1" "2 2" "2 3" "2 4" "2 5" "2 6"
## [3,] "3 1" "3 2" "3 3" "3 4" "3 5" "3 6"
## [4,] "4 1" "4 2" "4 3" "4 4" "4 5" "4 6"
## [5,] "5 1" "5 2" "5 3" "5 4" "5 5" "5 6"
## [6,] "6 1" "6 2" "6 3" "6 4" "6 5" "6 6"</code></pre></figure>

<p>As you can see, this matrix represents all possible outcomes of rolling two dies. Now, to roll two dies 10 times, we can just take a sample of size 10 with replacements from this matrix.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dice</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">as.vector</span><span class="p">(</span><span class="n">outer</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">6</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">6</span><span class="p">,</span><span class="w"> </span><span class="n">paste</span><span class="p">))</span><span class="w">
</span><span class="n">sample</span><span class="p">(</span><span class="n">dice</span><span class="p">,</span><span class="w"> </span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">replace</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">##  [1] "4 4" "1 2" "1 1" "6 2" "2 2" "2 1" "3 4" "6 5" "2 2" "1 3"</code></pre></figure>

<p>If you want to know how to efficiently take a random sample from a population of unknown or extremely large size, you can read my post on <a href="https://masterr.org/da/reservoir-sampling-and-algorithm-r/">reservoir sampling</a>.</p>
:ET
I"c7<p>In a <a href="https://masterr.org/r/calculate-global-minimum-variance-portfolio-using-r/">previous post</a>, I showed how to calculate the global minimum variance portfolio using R and vanguard funds in my retirement account. It had an average  annual return of 5.2% and volatility of 3.3% in the past 10 years. Because I’m holding those funds for a long term, at least 30 years. I don’t really mind a bigger volatility now. Instead, I really want a bigger return, say 10%. So I’ll set my target return as 10%, and find a portfolio that can achieve it. The resulting portfolio is called mean-variance efficient because it has the smallest volatility for the 10% target return.</p>

<p>Step 0. Load libraries and define helper functions.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">zoo</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">tseries</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Error in library(tseries): there is no package called 'tseries'</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">download_data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">symb</span><span class="p">,</span><span class="w"> </span><span class="n">begin</span><span class="p">,</span><span class="w"> </span><span class="n">end</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">get.hist.quote</span><span class="p">(</span><span class="n">instrument</span><span class="o">=</span><span class="n">symb</span><span class="p">,</span><span class="w"> </span><span class="n">start</span><span class="o">=</span><span class="n">begin</span><span class="p">,</span><span class="w"> </span><span class="n">end</span><span class="o">=</span><span class="n">end</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">origin</span><span class="o">=</span><span class="s2">"1970-01-01"</span><span class="p">,</span><span class="w"> </span><span class="n">quote</span><span class="o">=</span><span class="s2">"AdjClose"</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">provider</span><span class="o">=</span><span class="s2">"yahoo"</span><span class="p">,</span><span class="w"> </span><span class="n">compression</span><span class="o">=</span><span class="s2">"m"</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">retclass</span><span class="o">=</span><span class="s2">"zoo"</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">to_yearmon</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">index</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">as.yearmon</span><span class="p">(</span><span class="n">index</span><span class="p">(</span><span class="n">data</span><span class="p">))</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>Step 1. I choose assets from three broad classes: stocks, bonds, and commodities. For stocks, I choose funds that cover total US market, total international markets, and real estate. For bonds, I choose funds that invest in the total US bond market and inflation protected securities. For commodities, I choose funds that invest in gold and other precious metals and their mining companies and oil &amp; gas and energy companies. First, I download the monthly adjusted closing price data of these funds between June 2000 and Oct 2014 from Yahoo.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># initialize the fund symbols </span><span class="w">
</span><span class="n">stocks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"VTSMX"</span><span class="p">,</span><span class="w"> </span><span class="s2">"VGTSX"</span><span class="p">,</span><span class="w"> </span><span class="s2">"VGSIX"</span><span class="p">)</span><span class="w">
</span><span class="n">bonds</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"VIPSX"</span><span class="p">,</span><span class="w"> </span><span class="s2">"VBMFX"</span><span class="p">)</span><span class="w">
</span><span class="n">commodities</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"VGPMX"</span><span class="p">,</span><span class="w"> </span><span class="s2">"VGENX"</span><span class="p">)</span><span class="w">
</span><span class="n">symbols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">stocks</span><span class="p">,</span><span class="w"> </span><span class="n">bonds</span><span class="p">,</span><span class="w"> </span><span class="n">commodities</span><span class="p">)</span><span class="w">

</span><span class="c1"># download adj. price data</span><span class="w">
</span><span class="n">port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">()</span><span class="w">
</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">symbol</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">symbols</span><span class="p">)</span><span class="w">
        </span><span class="n">port</span><span class="p">[[</span><span class="n">symbol</span><span class="p">]]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">download_data</span><span class="p">(</span><span class="n">symbol</span><span class="p">,</span><span class="w"> </span><span class="s2">"2000-06-29"</span><span class="p">,</span><span class="w"> </span><span class="s2">"2014-10-31"</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Error in get.hist.quote(instrument = symb, start = begin, end = end, origin = "1970-01-01", : could not find function "get.hist.quote"</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># change the class of the time index to yearmon</span><span class="w">
</span><span class="n">lapply</span><span class="p">(</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">to_yearmon</span><span class="p">)</span><span class="w">

</span><span class="c1"># put both all price data in one data frame</span><span class="w">
</span><span class="n">prices</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">do.call</span><span class="p">(</span><span class="s2">"cbind"</span><span class="p">,</span><span class="w"> </span><span class="n">port</span><span class="p">)</span><span class="w">
</span><span class="n">colnames</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">symbols</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Error in `colnames&lt;-`(`*tmp*`, value = c("VTSMX", "VGTSX", "VGSIX", "VIPSX", : attempt to set 'colnames' on an object with less than two dimensions</code></pre></figure>

<p>Step 2. Calculate monthly continuously compounded returns as difference in log prices.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ret.cc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">diff</span><span class="p">(</span><span class="nf">log</span><span class="p">(</span><span class="n">prices</span><span class="p">))</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Error in log(prices): non-numeric argument to mathematical function</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># inspect the return data</span><span class="w">
</span><span class="n">cat</span><span class="p">(</span><span class="s2">"Start: "</span><span class="p">,</span><span class="w"> </span><span class="nf">as.character</span><span class="p">(</span><span class="n">start</span><span class="p">(</span><span class="n">ret.cc</span><span class="p">)),</span><span class="w"> </span><span class="s2">"  End: "</span><span class="p">,</span><span class="w"> </span><span class="nf">as.character</span><span class="p">(</span><span class="n">end</span><span class="p">(</span><span class="n">ret.cc</span><span class="p">)))</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Error in start(ret.cc): object 'ret.cc' not found</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">head</span><span class="p">(</span><span class="n">ret.cc</span><span class="p">,</span><span class="w"> </span><span class="m">3</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Error in head(ret.cc, 3): object 'ret.cc' not found</code></pre></figure>

<p>Step 3. Calculate annualized sample average returns of the underlying assets and the sample covariance matrix of the returns.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mu.hat.annual</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">ret.cc</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">12</span><span class="w">   </span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Error in apply(ret.cc, 2, mean): object 'ret.cc' not found</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">cov.mat.annual</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cov</span><span class="p">(</span><span class="n">ret.cc</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">12</span><span class="w"> </span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Error in is.data.frame(x): object 'ret.cc' not found</code></pre></figure>

<p>Step 4. Calculate the efficient portfolio with 10% as target return using a helper function written by Eric Zivot and Hezky Varon from U of Washington.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">helper</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"~/Coding/R-related/R/portfolio-optim/portfolio_noshorts.r"</span><span class="w">
</span><span class="n">source</span><span class="p">(</span><span class="n">helper</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Warning in file(filename, "r", encoding = encoding): cannot open file '/
## Users/gmlang/Coding/R-related/R/portfolio-optim/portfolio_noshorts.r': No
## such file or directory</code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Error in file(filename, "r", encoding = encoding): cannot open the connection</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">effi.port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">efficient.portfolio</span><span class="p">(</span><span class="n">mu.hat.annual</span><span class="p">,</span><span class="w"> </span><span class="n">cov.mat.annual</span><span class="p">,</span><span class="w"> </span><span class="m">0.1</span><span class="p">,</span><span class="w"> </span><span class="nb">F</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Error in efficient.portfolio(mu.hat.annual, cov.mat.annual, 0.1, F): could not find function "efficient.portfolio"</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">effi.port</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Error in eval(expr, envir, enclos): object 'effi.port' not found</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># port weights</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">effi.port</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Error in plot(effi.port): object 'effi.port' not found</code></pre></figure>

:ET
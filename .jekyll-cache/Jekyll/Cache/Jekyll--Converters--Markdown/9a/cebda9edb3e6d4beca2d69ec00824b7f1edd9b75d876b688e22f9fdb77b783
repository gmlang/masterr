I"/<p>This post contains my solution to one of the programming assignments from the <a href="https://www.coursera.org/course/rprog">R Programming</a> course on coursera. If you want to solve it yourself, please don’t read any further.</p>

<p>When running time consuming computations, it’s good to cache the results so that you can look them up later instead of computing them again. For example, maxtrix inversion is usually costly, especially when running inside of a loop. The following functions can compute and cache the inverse of a matrix.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">makeCacheMatrix()</code>: creates a special “matrix” object that can cache its inverse.</li>
  <li><code class="language-plaintext highlighter-rouge">cacheSolve()</code>: computes the inverse of the “matrix” returned by <code class="language-plaintext highlighter-rouge">makeCacheMatrix()</code>. If the inverse has already been calculated and the matrix has not changed, it’ll retrieves the inverse from the cache directly.</li>
</ol>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">makeCacheMatrix</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">matrix</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="c1">## @x: a square invertible matrix</span><span class="w">
        </span><span class="c1">## return: a list containing functions to</span><span class="w">
        </span><span class="c1">##              1. set the matrix</span><span class="w">
        </span><span class="c1">##              2. get the matrix</span><span class="w">
        </span><span class="c1">##              3. set the inverse</span><span class="w">
        </span><span class="c1">##              4. get the inverse</span><span class="w">
        </span><span class="c1">##         this list is used as the input to cacheSolve()</span><span class="w">
        
        </span><span class="n">inv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="w">
        </span><span class="n">set</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="c1"># use `&lt;&lt;-` to assign a value to an object in an environment </span><span class="w">
                </span><span class="c1"># different from the current environment. </span><span class="w">
                </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;&lt;-</span><span class="w"> </span><span class="n">y</span><span class="w">
                </span><span class="n">inv</span><span class="w"> </span><span class="o">&lt;&lt;-</span><span class="w"> </span><span class="kc">NULL</span><span class="w">
        </span><span class="p">}</span><span class="w">
        </span><span class="n">get</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="n">x</span><span class="w">
        </span><span class="n">setinv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">inverse</span><span class="p">)</span><span class="w"> </span><span class="n">inv</span><span class="w"> </span><span class="o">&lt;&lt;-</span><span class="w"> </span><span class="n">inverse</span><span class="w"> 
        </span><span class="n">getinv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="n">inv</span><span class="w">
        </span><span class="nf">list</span><span class="p">(</span><span class="n">set</span><span class="o">=</span><span class="n">set</span><span class="p">,</span><span class="w"> </span><span class="n">get</span><span class="o">=</span><span class="n">get</span><span class="p">,</span><span class="w"> </span><span class="n">setinv</span><span class="o">=</span><span class="n">setinv</span><span class="p">,</span><span class="w"> </span><span class="n">getinv</span><span class="o">=</span><span class="n">getinv</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">cacheSolve</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">...</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="c1">## @x: output of makeCacheMatrix()</span><span class="w">
        </span><span class="c1">## return: inverse of the original matrix input to makeCacheMatrix()</span><span class="w">
        
        </span><span class="n">inv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="o">$</span><span class="n">getinv</span><span class="p">()</span><span class="w">
        
        </span><span class="c1"># if the inverse has already been calculated</span><span class="w">
        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="nf">is.null</span><span class="p">(</span><span class="n">inv</span><span class="p">)){</span><span class="w">
                </span><span class="c1"># get it from the cache and skips the computation. </span><span class="w">
                </span><span class="n">message</span><span class="p">(</span><span class="s2">"getting cached data"</span><span class="p">)</span><span class="w">
                </span><span class="nf">return</span><span class="p">(</span><span class="n">inv</span><span class="p">)</span><span class="w">
        </span><span class="p">}</span><span class="w">
        
        </span><span class="c1"># otherwise, calculates the inverse </span><span class="w">
        </span><span class="n">mat.data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="o">$</span><span class="n">get</span><span class="p">()</span><span class="w">
        </span><span class="n">inv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">solve</span><span class="p">(</span><span class="n">mat.data</span><span class="p">,</span><span class="w"> </span><span class="n">...</span><span class="p">)</span><span class="w">
        
        </span><span class="c1"># sets the value of the inverse in the cache via the setinv function.</span><span class="w">
        </span><span class="n">x</span><span class="o">$</span><span class="n">setinv</span><span class="p">(</span><span class="n">inv</span><span class="p">)</span><span class="w">
        
        </span><span class="nf">return</span><span class="p">(</span><span class="n">inv</span><span class="p">)</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>To test out these functions. I wrote a function called <code class="language-plaintext highlighter-rouge">test()</code>, which takes in any invertible matrix, calculates its inverse twice using the above functions, and prints out the times it takes for both runs. The first run should take longer than the second run because it actually calculates the inverse while the second run only does a look-up from the cache.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">test</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">mat</span><span class="p">){</span><span class="w">
        </span><span class="c1">## @mat: an invertible matrix</span><span class="w">
        
        </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">makeCacheMatrix</span><span class="p">(</span><span class="n">mat</span><span class="p">)</span><span class="w">
        
        </span><span class="n">start.time</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Sys.time</span><span class="p">()</span><span class="w">
        </span><span class="n">cacheSolve</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span><span class="w">
        </span><span class="n">dur</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Sys.time</span><span class="p">()</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">start.time</span><span class="w">
        </span><span class="n">print</span><span class="p">(</span><span class="n">dur</span><span class="p">)</span><span class="w">
        
        </span><span class="n">start.time</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Sys.time</span><span class="p">()</span><span class="w">
        </span><span class="n">cacheSolve</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span><span class="w">
        </span><span class="n">dur</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Sys.time</span><span class="p">()</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">start.time</span><span class="w">
        </span><span class="n">print</span><span class="p">(</span><span class="n">dur</span><span class="p">)</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>Let’s try it on a matrix of 1000 rows and 1000 columns filled with normal random numbers.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">set.seed</span><span class="p">(</span><span class="m">1110201</span><span class="p">)</span><span class="w">
</span><span class="n">r</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="m">1000000</span><span class="p">)</span><span class="w">
</span><span class="n">mat1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="o">=</span><span class="m">1000</span><span class="p">,</span><span class="w"> </span><span class="n">ncol</span><span class="o">=</span><span class="m">1000</span><span class="p">)</span><span class="w">
</span><span class="n">test</span><span class="p">(</span><span class="n">mat1</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Time difference of 1.946601 secs</code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## getting cached data</code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Time difference of 0.0005111694 secs</code></pre></figure>

<p>The time it took for the first run is 2.02 seconds, and for the second run, 0.000498 seconds. This is a 99.8% decrease. Now imagine if you had to run the computation in a loop of 1000 iterations, without caching, it’s going to take you about 34 minutes, with caching, only 0.08 seconds. This is the power of caching!</p>
:ET
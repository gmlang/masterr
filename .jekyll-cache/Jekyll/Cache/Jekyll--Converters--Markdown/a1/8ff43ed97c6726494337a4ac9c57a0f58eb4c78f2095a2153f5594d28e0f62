I"¥<p>Now we know that R variables are objects, and that they can be manipulated, assigned any R objects and reassigned.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> (detailed discussion <a href="https://masterr.org/r/RFP-part3-variables/">here</a>.) We‚Äôll discuss variable shadowing and its difference from variable reassignment.</p>

<h2 id="variable-reassignment-in-r">Variable reassignment in R</h2>

<p>After we assign a R object to a variable, the variable will refer to that object. Let‚Äôs use a gray rectangular shape to represent the variable, and draw an arrow from the variable pointing to the object. For example, here is what‚Äôs going on behind the one-liner <code class="language-plaintext highlighter-rouge">x = 3</code> pictorially:</p>

<p><img src="../../figs/2019-02-14-RFP-part4-shadowing/var-binding.png" alt="" /></p>

<p>When a variable is reassigned another object, it won‚Äôt refer to the original object anymore. We represent this by changing the original solid arrow to a dashed one. A new solid arrow is drawn from the variable pointing to the new object. For example, the following diagram shows what happens if we reassign x to 32 (<code class="language-plaintext highlighter-rouge">x = 32</code>):</p>

<p><img src="../../figs/2019-02-14-RFP-part4-shadowing/var-rebinding.png" alt="" /></p>

<p>The above diagrams depict how variable assignment and reassignment work in both R and Python. Before we talk about how variable shadowing works in R, let‚Äôs take a look at how it works in an old programing language called Standard ML (SML).</p>

<h2 id="variable-shadowing-in-sml">Variable shadowing in SML</h2>

<p>SML doesn‚Äôt have variable reassignment or rebinding. For example, consider the same mathematical operation of first setting x to 3 and then to 32. Its SML code is</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>val x = 3;  (* create an environment and inside it bind x to 3*)
val x = 32; (* create a different environment and inside this new environment bind x to 32 *)
</code></pre></div></div>

<p>The following diagram captures what happens when we run the SML code:</p>

<p><img src="../../figs/2019-02-14-RFP-part4-shadowing/var-shadowing.png" alt="" /></p>

<p>The second x is a new variable different from the first x! It shadows the first x. As a result, if we print x we‚Äôd get 32. So the mathematical reassignment operation is carried out by variable shadowing in SML.</p>

<h2 id="variable-shadowing-in-r">Variable shadowing in R</h2>

<p>R also has variable shadowing, which happens if the same variable is assigned in different scopes. Reassignment happens if the same variable is assigned twice or more times in the same scope. Consider the following R code, where each function definition creates a new scope:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="w"> </span><span class="c1"># global x</span><span class="w">
</span><span class="n">outer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"The Great Gatsby"</span><span class="w"> </span><span class="c1"># outer x</span><span class="w">
        
        </span><span class="n">inner</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="w"> </span><span class="c1"># inner x</span><span class="w">
                </span><span class="n">print</span><span class="p">(</span><span class="n">paste</span><span class="p">(</span><span class="s2">"inner:"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">))</span><span class="w">
        </span><span class="p">}</span><span class="w">
        
        </span><span class="n">inner</span><span class="p">()</span><span class="w"> </span><span class="c1"># call function inner()</span><span class="w">
        </span><span class="n">print</span><span class="p">(</span><span class="n">paste</span><span class="p">(</span><span class="s2">"outer:"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">))</span><span class="w"> 
</span><span class="p">}</span><span class="w">

</span><span class="p">{</span><span class="w">
        </span><span class="n">outer</span><span class="p">()</span><span class="w"> </span><span class="c1"># call function outer()</span><span class="w">
        </span><span class="n">print</span><span class="p">(</span><span class="n">paste</span><span class="p">(</span><span class="s2">"global:"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">))</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## [1] "inner: TRUE"
## [1] "outer: The Great Gatsby"
## [1] "global: 0"</code></pre></figure>

<p>From the above printed output, we see the x inside <code class="language-plaintext highlighter-rouge">inner()</code> shadows the x between <code class="language-plaintext highlighter-rouge">inner()</code> and <code class="language-plaintext highlighter-rouge">outer()</code>, which further shadows the x outside of <code class="language-plaintext highlighter-rouge">outer()</code>. This can be seen more clearly from the following diagram:
<img src="/../figs/2019-02-14-RFP-part4-shadowing/unnamed-chunk-2-1.png" title="center" alt="center" style="display: block; margin: auto;" /></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>The terms ‚Äúvariable (re)assignment‚Äù and ‚Äúvariable (re)binding‚Äù are used interchangeably throughout this series because we use them for their mathematical meaning: (re)associate a symbol with a value.¬†<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET
I"ì/<p>In this and the next couple of posts, Iâ€™ll give examples of how to calculate optimized portfolios using R and the vanguard funds in my retirement account. Today, Iâ€™ll show you how to calculate the global minimum variance portfolio, which was the first major result in Markowitzâ€™s portfolio theory. Given a collection of assets, their global minimum variance portfolio is the portfolio with the smallest portfolio volitility.</p>

<p>Step 0. Load libraries and define helper functions</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">zoo</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">tseries</span><span class="p">)</span><span class="w">

</span><span class="n">download_data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">symb</span><span class="p">,</span><span class="w"> </span><span class="n">begin</span><span class="p">,</span><span class="w"> </span><span class="n">end</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">get.hist.quote</span><span class="p">(</span><span class="n">instrument</span><span class="o">=</span><span class="n">symb</span><span class="p">,</span><span class="w"> </span><span class="n">start</span><span class="o">=</span><span class="n">begin</span><span class="p">,</span><span class="w"> </span><span class="n">end</span><span class="o">=</span><span class="n">end</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">origin</span><span class="o">=</span><span class="s2">"1970-01-01"</span><span class="p">,</span><span class="w"> </span><span class="n">quote</span><span class="o">=</span><span class="s2">"AdjClose"</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">provider</span><span class="o">=</span><span class="s2">"yahoo"</span><span class="p">,</span><span class="w"> </span><span class="n">compression</span><span class="o">=</span><span class="s2">"m"</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">retclass</span><span class="o">=</span><span class="s2">"zoo"</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">to_yearmon</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">index</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">as.yearmon</span><span class="p">(</span><span class="n">index</span><span class="p">(</span><span class="n">data</span><span class="p">))</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>Step 1. I choose assets from three broad classes: stocks, bonds, and commodities. For stocks, I choose funds that cover total US market, total international markets, and real estate. For bonds, I choose funds that invest in the total US bond market and inflation protected securities. For commodities, I choose funds that invest in gold and other precious metals and their mining companies and oil &amp; gas and energy companies. First, I download the monthly adjusted closing price data of these funds between June 2000 and Oct 2014 from Yahoo.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># initialize the fund symbols </span><span class="w">
</span><span class="n">stocks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"VTSMX"</span><span class="p">,</span><span class="w"> </span><span class="s2">"VGTSX"</span><span class="p">,</span><span class="w"> </span><span class="s2">"VGSIX"</span><span class="p">)</span><span class="w">
</span><span class="n">bonds</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"VIPSX"</span><span class="p">,</span><span class="w"> </span><span class="s2">"VBMFX"</span><span class="p">)</span><span class="w">
</span><span class="n">commodities</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"VGPMX"</span><span class="p">,</span><span class="w"> </span><span class="s2">"VGENX"</span><span class="p">)</span><span class="w">
</span><span class="n">symbols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">stocks</span><span class="p">,</span><span class="w"> </span><span class="n">bonds</span><span class="p">,</span><span class="w"> </span><span class="n">commodities</span><span class="p">)</span><span class="w">

</span><span class="c1"># download adj. price data</span><span class="w">
</span><span class="n">port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">()</span><span class="w">
</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">symbol</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">symbols</span><span class="p">)</span><span class="w">
        </span><span class="n">port</span><span class="p">[[</span><span class="n">symbol</span><span class="p">]]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">download_data</span><span class="p">(</span><span class="n">symbol</span><span class="p">,</span><span class="w"> </span><span class="s2">"2000-06-29"</span><span class="p">,</span><span class="w"> </span><span class="s2">"2014-10-31"</span><span class="p">)</span><span class="w">

</span><span class="c1"># change the class of the time index to yearmon</span><span class="w">
</span><span class="n">lapply</span><span class="p">(</span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="n">to_yearmon</span><span class="p">)</span><span class="w">

</span><span class="c1"># put both all price data in one data frame</span><span class="w">
</span><span class="n">prices</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">do.call</span><span class="p">(</span><span class="s2">"cbind"</span><span class="p">,</span><span class="w"> </span><span class="n">port</span><span class="p">)</span><span class="w">
</span><span class="n">colnames</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">symbols</span></code></pre></figure>

<p>Step 2. Calculate monthly continuously compounded returns as difference in log prices.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ret.cc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">diff</span><span class="p">(</span><span class="nf">log</span><span class="p">(</span><span class="n">prices</span><span class="p">))</span><span class="w">

</span><span class="c1"># inspect the return data</span><span class="w">
</span><span class="n">cat</span><span class="p">(</span><span class="s2">"Start: "</span><span class="p">,</span><span class="w"> </span><span class="nf">as.character</span><span class="p">(</span><span class="n">start</span><span class="p">(</span><span class="n">ret.cc</span><span class="p">)),</span><span class="w"> </span><span class="s2">"  End: "</span><span class="p">,</span><span class="w"> </span><span class="nf">as.character</span><span class="p">(</span><span class="n">end</span><span class="p">(</span><span class="n">ret.cc</span><span class="p">)))</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Start:  2000-07-03   End:  2014-10-01</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">head</span><span class="p">(</span><span class="n">ret.cc</span><span class="p">,</span><span class="w"> </span><span class="m">3</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">##                  VTSMX        VGTSX       VGSIX        VIPSX       VBMFX
## 2000-07-03 -0.01971716 -0.045649607  0.08408300  0.007936630 0.008832746
## 2000-08-01  0.07027806  0.009904851 -0.04071584  0.006893088 0.013956404
## 2000-09-01 -0.04782406 -0.051333260  0.02899155 -0.004918734 0.007621014
##                  VGPMX       VGENX
## 2000-07-03 -0.01628457 -0.04730217
## 2000-08-01  0.11545891  0.11519991
## 2000-09-01 -0.07451730  0.01346586</code></pre></figure>

<p>Step 3. Calculate the sample average returns of the underlying assets and the sample covariance matrix of the returns.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mu.hat.annual</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">ret.cc</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">12</span><span class="w">   
</span><span class="n">cov.mat.annual</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cov</span><span class="p">(</span><span class="n">ret.cc</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">12</span><span class="w"> </span></code></pre></figure>

<p>Step 4. Finally, we can calculate the global minimum variance portfolio using a helper function written by Eric Zivot and Hezky Varon from U of Washington.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">helper</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"~/Coding/R-related/R/portfolio-optim/portfolio_noshorts.r"</span><span class="w">
</span><span class="n">source</span><span class="p">(</span><span class="n">helper</span><span class="p">)</span><span class="w">
</span><span class="n">global.minvar.port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">globalMin.portfolio</span><span class="p">(</span><span class="n">mu.hat.annual</span><span class="p">,</span><span class="w"> </span><span class="n">cov.mat.annual</span><span class="p">,</span><span class="w"> </span><span class="n">short</span><span class="o">=</span><span class="nb">F</span><span class="p">)</span><span class="w">

</span><span class="n">global.minvar.port</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## Call:
## globalMin.portfolio(er = mu.hat.annual, cov.mat = cov.mat.annual, 
##     shorts = F)
## 
## Portfolio expected return:     0.05214958 
## Portfolio standard deviation:  0.03355 
## Portfolio weights:
## VTSMX VGTSX VGSIX VIPSX VBMFX VGPMX VGENX 
## 0.065 0.000 0.000 0.000 0.935 0.000 0.000</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># port weights</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">global.minvar.port</span><span class="p">)</span></code></pre></figure>

<p><img src="/../figs/2014-11-06-calculate-global-minimum-variance-portfolio-using-r/unnamed-chunk-5-1.png" alt="center" /></p>
:ET
I"<p>This is the first article of a series on how environments work in R. If this
sounds foreign to you, you’re probably wondering, “what is a R environment?” 
Don’t. Instead, ask “what does a R environment do?” This is because 99% of the 
utility lies in understanding how it behaves. And yes, you can understand how it 
behaves without knowing what it is, which is confusing given that different 
things are carelessly named the same in the official R manual. For now, just
think of <code class="language-plaintext highlighter-rouge">environment</code> as a container. Or if you want, you can even take its 
english meaning (after all, programmers try to name things vividly). Every time
you open Rstudio, you’re inside an environment called the global environment.
How do I know that? You can check it yourself by running the following command
inside Rstudio. It tells you the current envionment you’re in.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">environment</span><span class="p">()</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## &lt;environment: R_GlobalEnv&gt;</code></pre></figure>

<p>Take a look at the Environment panel and notice the global env is currently 
empty. Let’s put some stuff inside by running the following code block.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"I'm good"</span><span class="w">
</span><span class="n">add_one</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="w">
        </span><span class="n">g</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="n">y</span><span class="w">
        </span><span class="n">g</span><span class="p">()</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>Look at the Environment panel again and notice the global env now has <code class="language-plaintext highlighter-rouge">y</code> and <code class="language-plaintext highlighter-rouge">add_one</code>. 
<img src="/images/global-env.png" alt="" /></p>

<p>What happens if I call <code class="language-plaintext highlighter-rouge">add_one(1)</code>? It returns 2. We see the 
value of <code class="language-plaintext highlighter-rouge">y</code> defined outside of the <code class="language-plaintext highlighter-rouge">add_one</code> function doesn’t affect the 
value of <code class="language-plaintext highlighter-rouge">y</code> defined inside. But what’s really going on under the hood?</p>

<p>The call <code class="language-plaintext highlighter-rouge">add_one(1)</code> happened in the global env as I simply ran it inside 
Rstudio without changing the current environment. We say the global env is the
calling environment of the function <code class="language-plaintext highlighter-rouge">add_one()</code>. If we search for <code class="language-plaintext highlighter-rouge">y</code>
inside the function’s calling environment, we’ll get a value of “I’m good.”
Obviously, this was not what R did when we ran <code class="language-plaintext highlighter-rouge">add_one(1)</code> because otherwise,
R would’ve returned an error as a result of adding a string and integer. So what
did R do?</p>

<p>When we sent <code class="language-plaintext highlighter-rouge">add_one(1)</code> to R (or when <code class="language-plaintext highlighter-rouge">add_one(1)</code> was evaluated), a new 
environment was created, with <code class="language-plaintext highlighter-rouge">x</code> placed inside and associated with the value 1.
Let’s call this new environment \(e_1\).</p>

<p>Next, the expression <code class="language-plaintext highlighter-rouge">y = x + 1</code> was evaluated in \(e_1\), and R searched for 
<code class="language-plaintext highlighter-rouge">x</code> first in \(e_1\) and found its value to be 1. Addition was carried out and
<code class="language-plaintext highlighter-rouge">y</code> was created in \(e_1\) and associated with a value of 2.</p>

<p>Next, the expression <code class="language-plaintext highlighter-rouge">g = function() y</code> was evaluated in \(e_1\). As a 
result, <code class="language-plaintext highlighter-rouge">g</code> was created in \(e_1\) and associated with a function 
<code class="language-plaintext highlighter-rouge">function() y</code>.</p>

<p>Finally, the expression <code class="language-plaintext highlighter-rouge">g()</code> was evaluated in \(e_1\). This created another
new environment with nothing inside. Let’s call it \(e_2\). The body of <code class="language-plaintext highlighter-rouge">g</code> 
asks to return <code class="language-plaintext highlighter-rouge">y</code>, this made R search for <code class="language-plaintext highlighter-rouge">y</code>, first inside \(e_2\) and found 
nothing, and then inside \(e_1\) and found a value of 2. Under the 
hood, R could move to \(e_1\) after done with \(e_2\) because \(e_2\) was 
pointed to \(e_1\) by a pointer. We call \(e_1\) is the parent (environment) of 
\(e_2\). In general, whenever R cannot find an object inside an environment, 
it’ll look for it in its parent environment.</p>

<p>This concludes the first article of the series. If you’re not confused yet, click here for the <a href="https://masterr.org/r/understand-r-environments-part2/">second article</a>, which provides a high level summary of this first article and shows how the <code class="language-plaintext highlighter-rouge">&lt;&lt;-</code> operator works.</p>

:ET
I"'<p>The regular assignment arrow <code class="language-plaintext highlighter-rouge">&lt;-</code> always creates a variable in the current 
environment. The deep assignment arrow <code class="language-plaintext highlighter-rouge">&lt;&lt;-</code> never creates a variable in the 
current environment, but instead modifies an existing variable in the 
parent environments. You can also do deep binding with <code class="language-plaintext highlighter-rouge">assign()</code>: 
<code class="language-plaintext highlighter-rouge">name &lt;&lt;- value is equivalent to assign("name", value, inherits = TRUE)</code>.
If <code class="language-plaintext highlighter-rouge">&lt;&lt;-</code> doesn’t find an existing variable, it will create one in the global 
environment. This is usually undesirable because global variables introduce 
non-obvious dependencies between functions.</p>

<p>In the Environments chapter of Hadley’s book
<a rel="nofollow" href="https://www.amazon.com/gp/product/1466586966/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1466586966&amp;linkCode=as2&amp;tag=cabaceo-20&amp;linkId=2GDWMZSF4NX32QIO">Advanced R</a><img src="https://ir-na.amazon-adsystem.com/e/ir?t=cabaceo-20&amp;l=as2&amp;o=1&amp;a=1466586966" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />, he gave the following function in exercise.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">rebind</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">value</span><span class="p">,</span><span class="w"> </span><span class="n">env</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">parent.frame</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">identical</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="w"> </span><span class="nf">emptyenv</span><span class="p">()))</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="n">stop</span><span class="p">(</span><span class="s2">"Can't find "</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">call.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">exists</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">envir</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">env</span><span class="p">,</span><span class="w"> </span><span class="n">inherits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="n">assign</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">value</span><span class="p">,</span><span class="w"> </span><span class="n">envir</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">env</span><span class="p">)</span><span class="w">
        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="n">rebind</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">value</span><span class="p">,</span><span class="w"> </span><span class="n">parent.env</span><span class="p">(</span><span class="n">env</span><span class="p">))</span><span class="w">
        </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>It behaves like <code class="language-plaintext highlighter-rouge">&lt;&lt;-</code> except when failing to find an existing variable, 
it runs into an error and stops.</p>

:ET
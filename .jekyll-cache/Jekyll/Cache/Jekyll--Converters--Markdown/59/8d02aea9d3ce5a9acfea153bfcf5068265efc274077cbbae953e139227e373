I"è<p>Function is a big topic in R programming. I‚Äôll spend several blog posts talking 
about it. But before I dive into R functions with full force, I want to show you 
how nice it is to work with them. Consider the following code:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="c1"># Bind x to 1 in the global environment.</span><span class="w">
</span><span class="n">f</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="c1"># Define a function to tell what value x maps to when we call it later.</span><span class="w">
</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="w"> </span><span class="c1"># Rebind x to 2 in the global environment.</span><span class="w">
</span><span class="c1"># ls(envir = globalenv()) # Check that x and f are indeed in the global environment.</span></code></pre></figure>

<p>When we call <code class="language-plaintext highlighter-rouge">f</code>, what will it return? Mathematically and intuitively, we‚Äôd expect 
<code class="language-plaintext highlighter-rouge">f</code> to return <code class="language-plaintext highlighter-rouge">2</code> because x has a value of 2 now (although it had a value of 1 before). 
If x takes a different value later, we‚Äôd expect <code class="language-plaintext highlighter-rouge">f</code> to return the new value when 
called later. In other words, we expect <code class="language-plaintext highlighter-rouge">f</code>, when called, to return the current 
x value. This is exactly what <code class="language-plaintext highlighter-rouge">f</code> does in R:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">f</span><span class="p">()</span><span class="w">   </span><span class="c1"># Calling f returns 2 because x is 2</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## [1] 2</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="w"> </span><span class="c1"># Rebind x to 3</span><span class="w">
</span><span class="n">f</span><span class="p">()</span><span class="w">   </span><span class="c1"># Calling f returns 3 because x is 3 now</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## [1] 3</code></pre></figure>

<p>So R evaluation rules<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, by and large, mimic mathematical or intuitive reasonings 
pretty well. As a result, we often don‚Äôt come across surprises when coding in R. 
Don‚Äôt take this for granted. Not every programming language behave this way. For 
example, if you try to do the same thing in SML, you‚Äôll be surprised by 
what you get. See the following SML code with detailed comments:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>val x = 1; (* Create an environment, and inside this environment, x is bound to 1.*)
fun f () = x; (* Define a function that when we call it later, it tells us what value x is bound to. *)
val x = 2; (* Create a different environment, and inside this new environment, x is bound to 2. *)
x; (* The later binding for x shadows the earlier one, so calling x returns 2. *)
f(); (* Calling f returns 1, NOT 2! This has to do with SML's evaluation rule. *)
</code></pre></div></div>

<p>In SML, how a binding is evaluated depends on (roughly) the values of the 
<strong>preceding</strong> bindings. Prior to the function binding (i.e., when <code class="language-plaintext highlighter-rouge">f</code> is defined), 
<code class="language-plaintext highlighter-rouge">x</code> was bound to 1, so evaluating the function binding (i.e., calling <code class="language-plaintext highlighter-rouge">f</code>) 
returns 1 not 2. In other words, in SML, <code class="language-plaintext highlighter-rouge">f</code> always returns the last value x was
bound to before <code class="language-plaintext highlighter-rouge">f</code> was defined.</p>

<p>Let‚Äôs all take a moment to appreciate the nice behavior of R functions.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Read this <a href="https://masterr.org/r/understand-r-environments-part1/">article</a> to understand exactly how code are evaluted in R.¬†<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET
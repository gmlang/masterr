I"<<p>If you have been following this R Functional Programming (RFP) series<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, you know by now we have discussed:</p>

<ul>
  <li><a href="https://masterr.org/r/RFP-part3-variables/">how regular assignment operators <code class="language-plaintext highlighter-rouge">&lt;-</code>/<code class="language-plaintext highlighter-rouge">=</code> work in R</a>, and</li>
  <li><a href="https://masterr.org/r/RFP-part5-immutability/">how ‚Äúcopy n modify‚Äù works in R</a>.</li>
</ul>

<p>In summary, we have the following facts about the R language:</p>

<ul>
  <li>Variable assignment binds symols to objects.</li>
  <li>Reassignment changes the binding. It doesn‚Äôt modify data.</li>
  <li>Mutability is a property of objects. It has nothing to do with variables or variable assignment.</li>
  <li>Copy-n-modify is everywhere.</li>
</ul>

<p>To better understand these facts, let‚Äôs walk through two examples. The first example consists
of the following code block:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">change</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">5</span><span class="w">
        </span><span class="n">print</span><span class="p">(</span><span class="n">paste</span><span class="p">(</span><span class="s2">"do work and get:"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="s2">"at addr"</span><span class="p">,</span><span class="w"> </span><span class="n">pryr</span><span class="o">::</span><span class="n">address</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="w">
        </span><span class="n">print</span><span class="p">(</span><span class="n">paste</span><span class="p">(</span><span class="s2">"start          :"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="s2">"at addr"</span><span class="p">,</span><span class="w"> </span><span class="n">pryr</span><span class="o">::</span><span class="n">address</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span><span class="w">
        
        </span><span class="n">change</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="c1"># x is not changed. It still points to the same value 5</span><span class="w">
        </span><span class="n">print</span><span class="p">(</span><span class="n">paste</span><span class="p">(</span><span class="s2">"end            :"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="s2">"at addr"</span><span class="p">,</span><span class="w"> </span><span class="n">pryr</span><span class="o">::</span><span class="n">address</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>What will happen if we call <code class="language-plaintext highlighter-rouge">main()</code>?</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">x</code> will be bound to 5.</li>
  <li>5 and its memory address will be printed.</li>
  <li><code class="language-plaintext highlighter-rouge">change(x)</code> will not change the value of <code class="language-plaintext highlighter-rouge">x</code>.</li>
  <li>5 and the same address will be printed.</li>
</ol>

<p>Let‚Äôs call it now:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">main</span><span class="p">()</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## [1] "start          : 5 at addr 0x7f875baea088"
## [1] "do work and get: 0 at addr 0x7f875ebda4e8"
## [1] "end            : 5 at addr 0x7f875baea088"</code></pre></figure>

<p>The output confirms our reasoning. When the line <code class="language-plaintext highlighter-rouge">change(x)</code> is executed, a new 
environment is created, then the value 5 is copied into this new environment and 
bound to a new variable <code class="language-plaintext highlighter-rouge">x</code><sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>. When the line <code class="language-plaintext highlighter-rouge">x = x - 5</code> is run, 
R looks up the value 5 of this new <code class="language-plaintext highlighter-rouge">x</code> from this new environment, carries out the 
subtraction and rebinds <code class="language-plaintext highlighter-rouge">x</code> to the result 0. When the program steps out of the 
function <code class="language-plaintext highlighter-rouge">change()</code>, everything (<code class="language-plaintext highlighter-rouge">x</code>, 0, 5) inside of this new environment will 
be garbage collected. I want to point out that the original <code class="language-plaintext highlighter-rouge">x</code> in <code class="language-plaintext highlighter-rouge">main()</code> is 
never modified. See the following diagram:</p>

<p><img src="../../figs/2019-03-10-RFP-part6-&lt;&lt;-/change-outside-main.png" alt="" /></p>

<h2 id="--reassigns-variables-in-outer-scope"><code class="language-plaintext highlighter-rouge">&lt;&lt;-</code> Reassigns Variables in Outer Scope</h2>

<p>Now let‚Äôs look at the second example:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">change</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;&lt;-</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">5</span><span class="w">
                </span><span class="n">print</span><span class="p">(</span><span class="n">paste</span><span class="p">(</span><span class="s2">"do work and get:"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="s2">"at addr"</span><span class="p">,</span><span class="w"> </span><span class="n">pryr</span><span class="o">::</span><span class="n">address</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span><span class="w">
        </span><span class="p">}</span><span class="w">
        
        </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="w">
        </span><span class="n">print</span><span class="p">(</span><span class="n">paste</span><span class="p">(</span><span class="s2">"start          :"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="s2">"at addr"</span><span class="p">,</span><span class="w"> </span><span class="n">pryr</span><span class="o">::</span><span class="n">address</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span><span class="w">
        
        </span><span class="n">change</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="c1"># x is changed. It now points to a new value 0 at a different location </span><span class="w">
        </span><span class="n">print</span><span class="p">(</span><span class="n">paste</span><span class="p">(</span><span class="s2">"end            :"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="s2">"at addr"</span><span class="p">,</span><span class="w"> </span><span class="n">pryr</span><span class="o">::</span><span class="n">address</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>This example differs from the first one at two places:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">change()</code> is defined inside of <code class="language-plaintext highlighter-rouge">main()</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;&lt;-</code> is used instead of <code class="language-plaintext highlighter-rouge">&lt;-</code> or <code class="language-plaintext highlighter-rouge">=</code> (<code class="language-plaintext highlighter-rouge">x &lt;&lt;- x - 5</code> instead of <code class="language-plaintext highlighter-rouge">x = x - 5</code>).</li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">&lt;&lt;-</code> operator is usually only used in functions. While operators <code class="language-plaintext highlighter-rouge">&lt;-</code> and <code class="language-plaintext highlighter-rouge">=</code> perform variable assignment inside the environment (or scope) where they are evaluated, <code class="language-plaintext highlighter-rouge">&lt;&lt;-</code> causes a search through parent environments for the variable being assigned. If such a variable is found (and its binding is not locked) then its value is redefined, otherwise assignment takes place in the global environment. 
I‚Äôd like to point out that like <code class="language-plaintext highlighter-rouge">&lt;-</code> and <code class="language-plaintext highlighter-rouge">=</code>, <code class="language-plaintext highlighter-rouge">&lt;&lt;-</code> also only changes the binding and doesn‚Äôt modify data.</p>

<p>In this example:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">change()</code> defines an inner scope and <code class="language-plaintext highlighter-rouge">main()</code> defines an outer scope.</li>
  <li>because of <code class="language-plaintext highlighter-rouge">&lt;&lt;-</code>, <code class="language-plaintext highlighter-rouge">change(x)</code> changes the value of <code class="language-plaintext highlighter-rouge">x</code> defined in the outer scope.</li>
</ul>

<p>When we call <code class="language-plaintext highlighter-rouge">main()</code>, the following will happen:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">change</code> will be bound to <code class="language-plaintext highlighter-rouge">function(x) { x &lt;&lt;- x - 5 ...}</code> in the outer scope.</li>
  <li><code class="language-plaintext highlighter-rouge">x</code> will be bound to 5 in the outer scope.</li>
  <li>5 and its memory address will be printed.</li>
  <li><code class="language-plaintext highlighter-rouge">change(x)</code> will change the value of outer <code class="language-plaintext highlighter-rouge">x</code> to 0 and print 5 and a different location.</li>
  <li>5 and yet another different location will be printed.</li>
</ol>

<p>Let‚Äôs call <code class="language-plaintext highlighter-rouge">main()</code> and look at the output:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">main</span><span class="p">()</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">## [1] "start          : 5 at addr 0x7f875f47f810"
## [1] "do work and get: 5 at addr 0x7f875e8daa80"
## [1] "end            : 0 at addr 0x7f875fcd4340"</code></pre></figure>

<p>The 2nd line of output is particularly interesting. You‚Äôre probably expecting it 
to print 0, but that wouldn‚Äôt be correct. When the line <code class="language-plaintext highlighter-rouge">change(x)</code> is executed, a new 
environment is created, then the value 5 is copied into this new environment and 
bound to a new variable <code class="language-plaintext highlighter-rouge">x</code><sup id="fnref:2:1" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>. When the line <code class="language-plaintext highlighter-rouge">x &lt;&lt;- x - 5</code> is run, R looks up 
the value 5 of this new <code class="language-plaintext highlighter-rouge">x</code> from this new environment, carries out the subtraction 
and rebinds <em>the <code class="language-plaintext highlighter-rouge">x</code> in the outer scope</em> to the result 0. Notice that the 
inner variable <code class="language-plaintext highlighter-rouge">x</code> is still bound to 5. When R executes the line
<code class="language-plaintext highlighter-rouge">print(paste("do work and get:", x, "at addr", pryr::address(x)))</code>, it looks up the
value and address of the inner <code class="language-plaintext highlighter-rouge">x</code>, and hence prints 5. Of course, because this 5 
is a copy of the outer 5, it is a different 5 and hence has a different memory address.
See the following diagram:</p>

<p><img src="../../figs/2019-03-10-RFP-part6-&lt;&lt;-/change-inside-main.png" alt="" /></p>

<p>To summarize, here‚Äôre the facts about <code class="language-plaintext highlighter-rouge">&lt;&lt;-</code>:</p>

<ul>
  <li>it‚Äôs usually only used in functions.</li>
  <li>it reassigns outer variables by changing its binding.</li>
  <li>it never modifies data directly.</li>
</ul>

<p>Here‚Äôs an example of how <code class="language-plaintext highlighter-rouge">&lt;&lt;-</code> can be used in real world:</p>

<p><a href="https://masterr.org/r/understand-r-environments-part3/">Mortgage Payment Schedule Calculator</a></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>If you haven‚Äôt, I recommend you to read the linked posts first.¬†<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>different from the <code class="language-plaintext highlighter-rouge">x</code> in <code class="language-plaintext highlighter-rouge">main()</code>.¬†<a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a>¬†<a href="#fnref:2:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p>
    </li>
  </ol>
</div>
:ET